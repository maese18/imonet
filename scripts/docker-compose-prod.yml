# Use root/example as user/password credentials
version: "3.1"

services:
  nginx:
    image: nginx:1.15-alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../proxy/config2/nginx:/etc/nginx/conf.d
      #- ../proxy/config2/certbot/conf:/etc/letsencrypt
      - /etc/letsencrypt:/etc/letsencrypt
      - ../proxy/config2/certbot/www:/var/www/certbot
      - ../proxy/config2/logs:/var/log/nginx

    networks:
      - proxy

  certbot:
    image: certbot/certbot
    volumes:
      - ../proxy/config2/certbot/conf:/etc/letsencrypt
      - ../proxy/config2/certbot/www:/var/www/certbot
  proxy_depr:
    hostname: reverse
    image: nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      # config folder MAY NOT exist when first starting
      - ../proxy/prod/config/nginx.conf:/etc/nginx/nginx.conf
      - ../proxy/prod/certs:/etc/ssl/private
  web-build:
    build:
      context: ../ui-vuetify
      dockerfile: Dockerfile
    volumes:
      - ../ui-vuetify:/usr/src/app
      - ../ui-vuetify/node_modules
    environment:
      VUE_APP_API_URL: ${VUE_APP_API_URL}
    env_file:
      - ./.env
    ports:
      - ${WEBAPP_PORT}:80
    networks:
      proxy:
  web:
    image: nginx:stable-alpine
    #ports:
    #  - 80:80

    volumes:
      - ../ui-vuetify/dist:/usr/share/nginx/html
      - ../ui-vuetify/nginx/nginx.conf:/etc/nginx/nginx.conf
      # - ../proxy/prod/certs:/etc/ssl/private
    command: [nginx, "-g", "daemon off;"]
    networks:
      - proxy

  web-build-2:
    image: node:13.6.0-alpine3.10
    restart: "no"
    volumes:
      - ../ui-vuetify:/usr/src/app # map code

    working_dir: /usr/src/app
    command: "yarn installAndBuild"
    env_file:
      - ./.env
    environment:
      VUE_APP_API_URL: ${VUE_APP_API_URL}
    ports:
      - ${WEBAPP_PORT}:80
    depends_on:
      - db
    networks:
      proxy:
  api:
    image: node:13.6.0-alpine3.10
    restart: "no"
    volumes:
      - ../api:/usr/src/app # map code

    working_dir: /usr/src/app
    command: "yarn prod"
    env_file:
      - ./.env
    environment:
      API_SERVER_PORT: ${API_SERVER_PORT}
    ports:
      - ${API_SERVER_PUBLIC_PORT}:${API_SERVER_PORT}
    depends_on:
      - db
    networks:
      proxy:

  db:
    image: mariadb/server
    # !!! command is a must if using with mariaDb driver -- otherwise you'll have connection issues !!!
    #
    # command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_INITDB_SKIP_TZINFO: "true"
    volumes:
      - ../db/data:/var/lib/mysql
      - ../db/db-setup/default:/docker-entrypoint-initdb.d
    ports:
      - ${DB_PORT}:3306

    networks:
      - proxy

  adminer:
    image: adminer
    restart: always
    ports:
      - ${DB_ADMIN_PORT}:8080
    networks:
      - proxy

  mongo:
    image: mongo
    restart: always
    environment:
      - MONGO_INITDB_DATABASE="test"
      - MONGO_INITDB_ROOT_USERNAME="root"
      - MONGO_INITDB_ROOT_PASSWORD="pw"
      - MONGO_INITDB_USERNAME="dbuser"
      - MONGO_INITDB_PASSWORD="pw"
      - MONGODB_DATA_DIR="/data/db"
    volumes:
      - ./data:/data/db
      - ./init/mongodb/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    networks:
      proxy:

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: pw
    networks:
      proxy:

networks:
  proxy:
    external: true
volumes:
  api:
  mysql:
  data:
    driver: local
